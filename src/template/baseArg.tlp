package {EntitySuperPackage}.base;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

/**
 * 此类为[代码工厂]自动生成
 * 统一的入参、出参对象<br>
 * 所有的方法都必须使用此对象作为出入参<br>
 * 出入参均以Map容器存储
 * @Time {Time}
 * @GeneratedByCodeFactory
 */
public class Argument {

    public final static int SUCCESS = 1000; 
    
    public final static int FAILED = 9999; 

    private int code = FAILED;

    private String message = "失败";

    private {PrimaryKeyJavaType} rowId = 0l;

    private int num = 0;
    
    private Object obj;
    
    /**
     * 入参
     */
    private Map<String, Object> req = new HashMap<String, Object>();
    
    /**
     * 出参
     */
    private Map<String, Object> rtn = new HashMap<String, Object>();
    
    public Argument fail() {
        this.code = FAILED;
        this.message = "失败";
        return this;
    }

    public Argument fail(String msg) {
        this.code = FAILED;
        this.message = msg;
        return this;
    }

    public Argument fail(int code, String msg) {
        if (code != 0 && code != SUCCESS) {
            code = FAILED;
        }
        this.code = code;
        this.message = msg;
        return this;
    }
    
    public Argument fail(int code, String msg, Map<String, Object> result) {
        if (code != 0 && code != SUCCESS) {
            code = FAILED;
        }
        this.code = code;
        this.message = msg;
        this.rtn = result;
        return this;
    }

    public Argument fail(Map<String, Object> result) {
        this.code = FAILED;
        this.message = "失败";
        this.rtn = result;
        return this;
    }

    public Argument success() {
        this.code = SUCCESS;
        this.message = "成功";
        return this;
    }
    
    public Argument success(String message) {
        this.code = SUCCESS;
        this.message = message;
        return this;
    }

    public Argument success(int code, String msg) {
        if (code != 0 && code != FAILED) {
            code = SUCCESS;
        }
        this.code = code;
        this.message = msg;
        return this;
    }

    public Argument success(int code, String msg, Map<String, Object> result) {
        if (code != 0 && code != FAILED) {
            code = SUCCESS;
        }
        this.code = code;
        this.message = "成功";
        this.rtn = result;
        return this;
    }

    public Argument success(Map<String, Object> result) {
        this.code = SUCCESS;
        this.message = "成功";
        this.rtn = result;
        return this;
    }

    public int getCode() {
        return code;
    }

    public Argument setCode(int code) {
        this.code = code;
        return this;
    }

    public String getMessage() {
        return message;
    }

    public Argument setMessage(String message) {
        this.message = message;
        return this;
    }

    public {PrimaryKeyJavaType} getRowId() {
        return rowId;
    }
    
    public {PrimaryKeyJavaType} getRowId(String idfeild) {
        if(rowId == null && obj != null){
            String methodName = "get" + idfeild.substring(0, 1).toUpperCase() + idfeild.substring(1);
            Method method;
            try {
                method = obj.getClass().getMethod(methodName);
                Object value = method.invoke(obj, null);
                if(value != null){
                    rowId = ({PrimaryKeyJavaType}) value;                
                }
            } catch (Exception e) {
                rowId = null;
            }
        }
        return rowId;
    }

    public Argument setRowId({PrimaryKeyJavaType} rowId) {
        this.rowId = rowId;
        return this;
    }

    public int getNum() {
        return num;
    }

    public Argument setNum(int num) {
        this.num = num;
        return this;
    }
    
    public Object getObj() {
        return obj;
    }

    public Argument setObj(Object obj) {
        this.obj = obj;
        return this;
    }

    public Object getReq() {
        return req;
    }

    public Argument setReq(Map<String, Object> req) {
        this.req = req;
        return this;
    }

    public Object getRtn() {
        return rtn;
    }

    public Argument setRtn(Map<String, Object> result) {
        this.rtn = result;
        return this;
    }

    /**
     * 判断操作是否成功
     * @return true 成功，false 失败
     */
    public boolean isSuccess() {
        return this.code != 0 && this.code == SUCCESS;
    }

    public Object getReq(String key) {
        return this.req.get(key);
    }

    public String getStringForReq(String key) {
        Object value = this.getReq(key);
        return value == null ? null : value.toString();
    }

    public Integer getIntForReq(String key) {
        Object value = this.getReq(key);
        return value == null ? null : Integer.parseInt(value.toString());
    }

    public Float getFloatForReq(String key) {
        Object value = this.getReq(key);
        return value == null ? null : Float.parseFloat(value.toString());
    }
    
    public Double getDoubleForReq(String key) {
        Object value = this.getReq(key);
        return value == null ? null : Double.parseDouble(value.toString());
    }
    
    public Long getLongForReq(String key) {
        Object value = this.getReq(key);
        return value == null ? null : Long.parseLong(value.toString());
    }
    
    public Object getRtn(String key) {
        return this.rtn.get(key);
    }

    public String getStringForRtn(String key) {
        Object value = this.getRtn(key);
        return value == null ? null : value.toString();
    }

    public Integer getIntForRtn(String key) {
        Object value = this.getRtn(key);
        return value == null ? null : Integer.parseInt(value.toString());
    }

    public Float getFloatForRtn(String key) {
        Object value = this.getRtn(key);
        return value == null ? null : Float.parseFloat(value.toString());
    }
    
    public long getLongForRtn(String key) {
        Object value = this.getRtn(key);
        return value == null ? null : Long.parseLong(value.toString());
    }

    public Argument setToRtn(String key, Object value) {
        this.rtn.put(key, value);
        return this;
    }

    public Argument setToReq(String key, Object value) {
        this.req.put(key, value);
        return this;
    }
    
    public Argument setDataToRtn(Object value) {
        this.rtn.put("data", value);
        return this;
    }

    public Argument setDataToReq(Object value) {
        this.req.put("data", value);
        return this;
    }

}
